1)npm install rxjs - instalacija rxjs

******************pomenuti operatori*************************
- interval(x) - sekvencijalno generisanje integera od 0 do x.
- take(x) - uzmi x podataka iz izvora.
- range(from, count?) - generisanje count broja integera pocevsi od from.
- takeUntil() - ima 2 toka, jedan kontrolni(prosledjeni -> ob$) i jedan koji generise vrednosti.
		Kada se kontrolni zatvori tada se gasi i drugi tok.
- fromEvent(document, "<event>") - datovod na osnovu dogadjaja. 
- sampleTime(t) - na koliko ce se izvrsavati.
- debounceTime(t)
****************************************************************
- Svi operatori se moraju importovati.
- Svi operatori koji se rade nad observable-om moraju biti wrapovani u pipe.

- cold i hot observables:
	1) cold observables - emituju vrednosti tek kada se pretplatimo (subscribe) na njih.		//npr netflix
	2) hot observables - emituju vrednosti bez obzira da li subscribeujemo ili ne.			//npr bioskop

- unutar pipe (datovoda/stream podataka) se vrsi transformacija podataka i uvek se vraca cista vrednost.

*****************pipe***************
//primeri za interval, take i range:

function execInterval(){
    interval(500).pipe(
        map( x => x * x),
        take(20)
    ).subscribe(x => console.log('interval: ' + x));
}

function execRange(){
    range(10, 10).pipe(
        filter(x => x % 2 === 0),
        map(x => x + 3)
    ).subscribe(x => console.log('range: ' + x));
}


************kontrola subskripcije**************

//primer za kontrolu subskripcije:

- ako postavimo da funkcija vraca subskripciju:

function execInterval(): Subscription{
    return interval(500).pipe(
        map( x => x * x),
        take(20)
    ).subscribe(x => console.log('interval: ' + x));
}

function execRange(): Subscription{
    return range(10, 10).pipe(
        filter(x => x % 2 === 0),
        map(x => x + 3)
    ).subscribe(x => console.log('range: ' + x));
}

, onda dobijamo hendler za tu subskripciju (npr za prekidanje subskripcije).

- Potom pravimo unsub na klik u sledecoj funkciji kojoj prosledjujemo Subscription:

function createUnsubscribeButton(sub: Subscription){

    const button = document.createElement('button');
    document.body.appendChild(button);
    button.innerHTML = "Stop";
    button.onclick = () => sub.unsubscribe();
}

createUnsubscribeButton(execInterval());
createUnsubscribeButton(execRange());

- Finska notacija: posto je datovod(stream) mnozina, actors/cars/places, u finskoj notaciji se poslednje
slovo menja sa $. ---> actor$/car$/place$

**************Subject*********************

- Moze se kreirati i subject, poseban vid observable-a.
  Imamo kontrolu nad njim i na njega drugi mogu da se subscribeuju.
  Koristi se u situacijama kada imamo kontrolni tok.
- Razlika izmedju Subject-a i Observable-a je u tome sto SUbjectu mozemo reci 
  kada da radi i kada da se zatvori.

const subject$ = new Subject();


//Primer koriscenja takeUntil():



const controlFlow = new Subject();		//promenljiva za kontrolu toka

function execInterval(ob$: Observable<any>): Subscription{
    return interval(200).pipe(
        map( x => x * x),
        takeUntil(ob$)
    ).subscribe(x => console.log('interval: ' + x));
}

execInterval(controlFlow)			//posledjivanje promenljive execInterval, gde ustavi postaje

function createUnsubscribeButton(subject$: Subject<any>){

    const button = document.createElement('button');
    document.body.appendChild(button);
    button.innerHTML = "Stop";
    button.onclick = () => {		//proces zatvaranja Subjecta
        subject$.next(1);
        subject$.complete();
	console.log("Control stream CLOSED");
    }
}

createUnsubscribeButton(controlFlow);		//prosledjuje se kontrolni tok (controlFLow) dugmetu koje kada se klikne
						  se zatvara kontrolni tok i time daje signal da se zaustavlja i drugi tok.


//primer kreiranja sopstvenog Observable-a:

function execGenerator(){
    new Observable((generator) => {
        setInterval(() => {
            const broj = Math.round(Math.random() * 10);
            generator.next(broj);
        }, 500)
    }).pipe(
        take(20)
    ).subscribe(x => console.log("generator: " + x))
}

execGenerator();



***************Observable iz event-a******************

//logovanje x i y koordinata kurzora

fromEvent(document, "mousemove").pipe(
    map((ev: MouseEvent) => ({x: ev.screenX, y: ev.screenY}))
).subscribe((coords) => console.log(coords));


//searchbox sa preporukama

function createSuggestion(){
    const inputEl = document.createElement("input");
    document.body.appendChild(inputEl);
    fromEvent(inputEl, "input").pipe(
        debounceTime(1000),
        map((ev: InputEvent) => (<HTMLInputElement>ev.target).value),		//preuzimanje teksta iz inputa
        filter((txt: string) => txt.length > 2)
    ).subscribe(txt => console.log("query baze za " + txt));
}

createSuggestion();


