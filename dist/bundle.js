(()=>{"use strict";var t=function(n,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])},t(n,r)};function n(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}function r(t,n){var r,e,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(r=1,e&&(o=2&c[0]?e.return:c[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,c[1])).done)return o;switch(e=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,e=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=n.call(t,u)}catch(t){c=[6,t],e=0}finally{r=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function e(t){var n="function"==typeof Symbol&&Symbol.iterator,r=n&&t[n],e=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,i=r.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(e=i.next()).done;)u.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function i(t,n,r){if(r||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return t.concat(e||Array.prototype.slice.call(n))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t){return"function"==typeof t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var s,a=((s=function(t){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function l(t,n){if(t){var r=t.indexOf(n);0<=r&&t.splice(r,1)}}var f=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,r,u,s;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var f=e(l),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(n){t={error:n}}finally{try{h&&!h.done&&(n=f.return)&&n.call(f)}finally{if(t)throw t.error}}else l.remove(this);var d=this.initialTeardown;if(c(d))try{d()}catch(t){s=t instanceof a?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var y=e(v),b=y.next();!b.done;b=y.next()){var w=b.value;try{p(w)}catch(t){s=null!=s?s:[],t instanceof a?s=i(i([],o(s)),o(t.errors)):s.push(t)}}}catch(t){r={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(r)throw r.error}}}if(s)throw new a(s)}},t.prototype.add=function(n){var r;if(n&&n!==this)if(this.closed)p(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&l(n,t)},t.prototype.remove=function(n){var r=this._finalizers;r&&l(r,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}();function h(t){return t instanceof f||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function p(t){c(t)?t():t.unsubscribe()}f.EMPTY;var d=function(t){function r(n,r){return t.call(this)||this}return n(r,t),r.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},r}(f),v={setInterval:function(t,n){for(var r=[],e=2;e<arguments.length;e++)r[e-2]=arguments[e];var u=v.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([t,n],o(r))):setInterval.apply(void 0,i([t,n],o(r)))},clearInterval:function(t){var n=v.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},y=function(t){function r(n,r){var e=t.call(this,n,r)||this;return e.scheduler=n,e.work=r,e.pending=!1,e}return n(r,t),r.prototype.schedule=function(t,n){var r;if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,o=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(o,e,n)),this.pending=!0,this.delay=n,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(o,this.id,n),this},r.prototype.requestAsyncId=function(t,n,r){return void 0===r&&(r=0),v.setInterval(t.flush.bind(t,this),r)},r.prototype.recycleAsyncId=function(t,n,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return n;null!=n&&v.clearInterval(n)},r.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,n);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(t,n){var r,e=!1;try{this.work(t)}catch(t){e=!0,r=t||new Error("Scheduled action threw falsy error")}if(e)return this.unsubscribe(),r},r.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,r=this.scheduler,e=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,l(e,this),null!=n&&(this.id=this.recycleAsyncId(r,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},r}(d),b={now:function(){return(b.delegate||Date).now()},delegate:void 0},w=function(){function t(n,r){void 0===r&&(r=t.now),this.schedulerActionCtor=n,this.now=r}return t.prototype.schedule=function(t,n,r){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(r,n)},t.now=b.now,t}(),m=new(function(t){function r(n,r){void 0===r&&(r=w.now);var e=t.call(this,n,r)||this;return e.actions=[],e._active=!1,e}return n(r,t),r.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var r;this._active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,r){for(;t=n.shift();)t.unsubscribe();throw r}}},r}(w))(y),x=m,g={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},_={setTimeout:function(t,n){for(var r=[],e=2;e<arguments.length;e++)r[e-2]=arguments[e];var u=_.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,n],o(r))):setTimeout.apply(void 0,i([t,n],o(r)))},clearTimeout:function(t){var n=_.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function S(t){_.setTimeout((function(){var n=g.onUnhandledError;if(!n)throw t;n(t)}))}function I(){}var E=T("C",void 0,void 0);function T(t,n,r){return{kind:t,value:n,error:r}}var A=null,P=function(t){function r(n){var r=t.call(this)||this;return r.isStopped=!1,n?(r.destination=n,h(n)&&n.add(r)):r.destination=U,r}return n(r,t),r.create=function(t,n,r){return new z(t,n,r)},r.prototype.next=function(t){this.isStopped?N(function(t){return T("N",t,void 0)}(t),this):this._next(t)},r.prototype.error=function(t){this.isStopped?N(T("E",void 0,t),this):(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped?N(E,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(f),O=Function.prototype.bind;function k(t,n){return O.call(t,n)}var j=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){D(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){D(t)}else D(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){D(t)}},t}(),z=function(t){function r(n,r,e){var o,i,u=t.call(this)||this;return c(n)||!n?o={next:null!=n?n:void 0,error:null!=r?r:void 0,complete:null!=e?e:void 0}:u&&g.useDeprecatedNextContext?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&k(n.next,i),error:n.error&&k(n.error,i),complete:n.complete&&k(n.complete,i)}):o=n,u.destination=new j(o),u}return n(r,t),r}(P);function D(t){var n;g.useDeprecatedSynchronousErrorHandling?(n=t,g.useDeprecatedSynchronousErrorHandling&&A&&(A.errorThrown=!0,A.error=n)):S(t)}function N(t,n){var r=g.onStoppedNotification;r&&_.setTimeout((function(){return r(t,n)}))}var U={closed:!0,next:I,error:function(t){throw t},complete:I},C="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(t){return t}var Y=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e,o=this,i=(e=t)&&e instanceof P||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(e)&&h(e)?t:new z(t,n,r);return function(t){if(g.useDeprecatedSynchronousErrorHandling){var n=!A;if(n&&(A={errorThrown:!1,error:null}),t(),n){var r=A,e=r.errorThrown,o=r.error;if(A=null,e)throw o}}else t()}((function(){var t=o,n=t.operator,r=t.source;i.add(n?n.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=F(n))((function(n,e){var o=new z({next:function(n){try{t(n)}catch(t){e(t),o.unsubscribe()}},error:e,complete:n});r.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[C]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(0===(r=t).length?H:1===r.length?r[0]:function(t){return r.reduce((function(t,n){return n(t)}),t)})(this);var r},t.prototype.toPromise=function(t){var n=this;return new(t=F(t))((function(t,r){var e;n.subscribe((function(t){return e=t}),(function(t){return r(t)}),(function(){return t(e)}))}))},t.create=function(n){return new t(n)},t}();function F(t){var n;return null!==(n=null!=t?t:g.Promise)&&void 0!==n?n:Promise}function R(t){return t&&c(t.schedule)}function q(t,n){return void 0===t&&(t=0),void 0===n&&(n=m),t<0&&(t=0),function(t,n,r){void 0===t&&(t=0),void 0===r&&(r=x);var e=-1;return null!=n&&(R(n)?r=n:e=n),new Y((function(n){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-r.now():t;i<0&&(i=0);var u=0;return r.schedule((function(){n.closed||(n.next(u++),0<=e?this.schedule(void 0,e):n.complete())}),i)}))}(t,t,n)}function M(t){return function(n){if(function(t){return c(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function G(t,n,r,e,o){return new L(t,n,r,e,o)}var L=function(t){function r(n,r,e,o,i,u){var c=t.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=r?function(t){try{r(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=e?function(){try{e()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return n(r,t),r.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},r}(P);function B(t,n){return M((function(r,e){var o=0;r.subscribe(G(e,(function(r){e.next(t.call(n,r,o++))})))}))}var J=new Y((function(t){return t.complete()}));function K(t){return t<=0?function(){return J}:M((function(n,r){var e=0;n.subscribe(G(r,(function(n){++e<=t&&(r.next(n),t<=e&&r.complete())})))}))}var Q=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function V(t){return c(null==t?void 0:t.then)}function W(t){return c(t[C])}function X(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}function Z(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var $="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function tt(t){return c(null==t?void 0:t[$])}function nt(t){return function(t,n,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=r.apply(t,n||[]),i=[];return e={},c("next"),c("throw"),c("return"),e[Symbol.asyncIterator]=function(){return this},e;function c(t){o[t]&&(e[t]=function(n){return new Promise((function(r,e){i.push([t,n,r,e])>1||s(t,n)}))})}function s(t,n){try{(r=o[t](n)).value instanceof u?Promise.resolve(r.value.v).then(a,l):f(i[0][2],r)}catch(t){f(i[0][3],t)}var r}function a(t){s("next",t)}function l(t){s("throw",t)}function f(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}(this,arguments,(function(){var n,e,o;return r(this,(function(r){switch(r.label){case 0:n=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(n.read())];case 3:return e=r.sent(),o=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function rt(t){return c(null==t?void 0:t.getReader)}function et(t){if(t instanceof Y)return t;if(null!=t){if(W(t))return i=t,new Y((function(t){var n=i[C]();if(c(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Q(t))return o=t,new Y((function(t){for(var n=0;n<o.length&&!t.closed;n++)t.next(o[n]);t.complete()}));if(V(t))return r=t,new Y((function(t){r.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,S)}));if(X(t))return ot(t);if(tt(t))return n=t,new Y((function(t){var r,o;try{for(var i=e(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){r={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}t.complete()}));if(rt(t))return ot(nt(t))}var n,r,o,i;throw Z(t)}function ot(t){return new Y((function(n){(function(t,n){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,r=t[Symbol.asyncIterator];return r?r.call(t):(t=e(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(r){n[r]=t[r]&&function(n){return new Promise((function(e,o){!function(t,n,r,e){Promise.resolve(e).then((function(n){t({value:n,done:r})}),n)}(e,o,(n=t[r](n)).done,n.value)}))}}}(t),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(s=i.value,n.next(s),n.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=r.sent(),u={error:a},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function r(t){try{o(f.next(t))}catch(t){n(t)}}function e(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(r,e)}o((f=f.apply(s,a||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function it(t,n,r,e,o){void 0===e&&(e=0),void 0===o&&(o=!1);var i=n.schedule((function(){r(),o?t.add(this.schedule(null,e)):this.unsubscribe()}),e);if(t.add(i),!o)return i}function ut(t,n,r){return void 0===r&&(r=1/0),c(n)?ut((function(r,e){return B((function(t,o){return n(r,t,e,o)}))(et(t(r,e)))}),r):("number"==typeof n&&(r=n),M((function(n,e){return function(t,n,r,e,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||n.complete()},p=function(t){return a<e?d(t):s.push(t)},d=function(t){a++;var o=!1;et(r(t,l++)).subscribe(G(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<e;)t=void 0,t=s.shift(),d(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(G(n,p,(function(){f=!0,h()}))),function(){}}(n,e,t,r)})))}function ct(t){return t[t.length-1]}function st(t,n){return void 0===n&&(n=0),M((function(r,e){r.subscribe(G(e,(function(r){return it(e,t,(function(){return e.next(r)}),n)}),(function(){return it(e,t,(function(){return e.complete()}),n)}),(function(r){return it(e,t,(function(){return e.error(r)}),n)})))}))}function at(t,n){return void 0===n&&(n=0),M((function(r,e){e.add(t.schedule((function(){return r.subscribe(e)}),n))}))}function lt(t,n){if(!t)throw new Error("Iterable cannot be null");return new Y((function(r){it(r,n,(function(){var e=t[Symbol.asyncIterator]();it(r,n,(function(){e.next().then((function(t){t.done?r.complete():r.next(t.value)}))}),0,!0)}))}))}(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=function(t){return R(ct(t))?t.pop():void 0}(t),e=function(t,n){return"number"==typeof ct(t)?t.pop():1/0}(t),o=t;return o.length?1===o.length?et(o[0]):function(t){return void 0===t&&(t=1/0),ut(H,t)}(e)(function(t,n){return n?function(t,n){if(null!=t){if(W(t))return function(t,n){return et(t).pipe(at(n),st(n))}(t,n);if(Q(t))return function(t,n){return new Y((function(r){var e=0;return n.schedule((function(){e===t.length?r.complete():(r.next(t[e++]),r.closed||this.schedule())}))}))}(t,n);if(V(t))return function(t,n){return et(t).pipe(at(n),st(n))}(t,n);if(X(t))return lt(t,n);if(tt(t))return function(t,n){return new Y((function(r){var e;return it(r,n,(function(){e=t[$](),it(r,n,(function(){var t,n,o;try{n=(t=e.next()).value,o=t.done}catch(t){return void r.error(t)}o?r.complete():r.next(n)}),0,!0)})),function(){return c(null==e?void 0:e.return)&&e.return()}}))}(t,n);if(rt(t))return function(t,n){return lt(nt(t),n)}(t,n)}throw Z(t)}(t,n):et(t)}(o,r)):J})(q(200).pipe(B((function(t){return"prvi-"+t})),K(5)),q(2e3).pipe(B((function(t){return"drugi-"+t})),K(3))).subscribe((function(t){console.log("synced ",t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,